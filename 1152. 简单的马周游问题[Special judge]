#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <cstring>

int visit[31];
std::vector<int> path;
int step;

bool If_Valid(int next_r,int next_c){
    int location=(next_r-1)*6+next_c;
    if(visit[location]==1)
        return false;
    return (next_r>=1&&next_r<=5&&next_c>=1&&next_c<=6);
}


void Travaling(int current_location){
    if(step == 30){
        int i = 29;
        for(i=0; i < 29; i++)
            std::cout<<path[i]<<" ";
        std::cout<<path[29]<<std::endl;
        path.clear();
        return;
    }
    else{
        int next[][2] = {{-1,-2},{1,-2},{2,-1},{2,1},{1,2},{-1,2},{-2,1},{-2,-1}} ;
        int next_location;
        for(int i = 0; i <8; i++){
            int next_r=(current_location-1)/6+1+next[i][0];
            int next_c=(current_location-1)%6+1+next[i][1];
            if(If_Valid(next_r,next_c)){
                next_location=(next_r-1)*6+next_c;
                step++;
                visit[next_location]=1;
                path.push_back(next_location);
                Travaling(next_location);
                if(step==30)return;
                visit[next_location]=0;
                path.pop_back();
                step--;
            }
        }
    }

}

int main(){
    int start_location;
    std::cin>>start_location;

    while(start_location != -1){
        std::memset(visit,0,sizeof(visit));
        path.clear();
        path.push_back(start_location);
        visit[start_location]=1;
        step=1;
        Travaling(start_location);
        std::cin>>start_location;
    }
    return 0;
}                                 
